using UnityEngine;
using System.Collections;
 
public class MouseLook : MonoBehaviour {
 
public enum RotationAxes { MouseXAndY = 0, MouseX = 1, MouseY = 2 }
 
public RotationAxes axes = RotationAxes.MouseXAndY;
public float sensitivityX = 0.0f;
public float sensitivityY = 0.0f;
 
public float minimumX = -360f;
public float maximumX = 360f;
 
public float minimumY = -60f;
public float maximumY = 60f;
 
float rotationX = 0;
float rotationY = 0;
 
Quaternion originalRotation;
 
static bool Aktive;
 
void Start () {
if (rigidbody)
{
rigidbody.freezeRotation = true;
}
originalRotation = transform.localRotation;
Aktive = false;
}
 
public void SetOriginalRotation(Quaternion rotation) {
originalRotation = rotation;
}
 
public void SetXRotation(float rotation) {
rotationX = rotation;
}
 
public void SetYRotation(float rotation) {
rotationY = rotation;
}
 
void Update () {
if(!SceneIntro.IntroPlayed)
return;
		
Aktive = SceneIntro.IntroPlayed;
		
if(!Aktive)
return;
 
if(Camera.current != null) {
sensitivityX = 0.03f * Camera.current.fieldOfView;
sensitivityY = 0.03f * Camera.current.fieldOfView;
}
 
Quaternion yQuaternion;
Quaternion xQuaternion;
 
if (axes == RotationAxes.MouseXAndY)
{
// Read the mouse input axis
rotationX += Input.GetAxis("Mouse X") * sensitivityX;
rotationY += Input.GetAxis("Mouse Y") * sensitivityY;
 
rotationX = ClampAngle(rotationX, minimumX, maximumX);
rotationY = ClampAngle(rotationY, minimumY, maximumY);
 
xQuaternion = Quaternion.AngleAxis(rotationX, Vector3.up);
yQuaternion = Quaternion.AngleAxis(rotationY, Vector3.left);
 
transform.localRotation = originalRotation * xQuaternion * yQuaternion;
}
else if (axes == RotationAxes.MouseX)
{
rotationX += Input.GetAxis("Mouse X") * sensitivityX;
rotationX = ClampAngle(rotationX, minimumX, maximumX);
 
xQuaternion = Quaternion.AngleAxis(rotationX, Vector3.up);
transform.localRotation = originalRotation * xQuaternion;
}
else
{
rotationY += Input.GetAxis("Mouse Y") * sensitivityY;
rotationY = ClampAngle(rotationY, minimumY, maximumY);
 
yQuaternion = Quaternion.AngleAxis(rotationY, Vector3.left);
transform.localRotation = originalRotation * yQuaternion;
}
}
 
static float ClampAngle ( float angle, float min, float max)
{
if (angle < -360)
angle += 360;
if (angle > 360)
angle -= 360;
return Mathf.Clamp (angle, min, max);
}
 
public static void SetAktive(bool aktive) {
Aktive = aktive;	
}
}