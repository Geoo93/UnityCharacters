using UnityEngine;
using System.Collections;

[ExecuteInEditMode] 
public class BirdController : MonoBehaviour {
	
	public float minFlySpeed;
	public float maxFlySpeed;
	public float TurnDelta;
	public float minWaypointTime;
	public float maxWaypointTime;
	public float minWayPointSwitchDistance;
	public float banking;
	public Vector3 FlyBounds;
	public Animation Ani;
	
	private float flySpeed, turnSpeed,  maxPathPointTime, nextWayPointTime;
	private Vector3 BaseOrigin;
	private Vector3 ActiveWayPoint;
	private Quaternion targetRotation;
	private AnimationState animationState;
	private float baseSpeed;

	void Start () {
		flySpeed = Random.Range(minFlySpeed,maxFlySpeed);
		baseSpeed = flySpeed;
		turnSpeed = Random.Range(flySpeed,maxFlySpeed) * TurnDelta;
		maxPathPointTime = Random.Range(minWaypointTime,maxWaypointTime);
		nextWayPointTime = Time.time + maxPathPointTime;
		BaseOrigin = transform.position;
		SetNextWayPoint();
		animationState = Ani["Take 001"];
	}
	
	void SetNextWayPoint() {
		ActiveWayPoint.x = BaseOrigin.x + Random.Range(-FlyBounds.x,FlyBounds.x);
		ActiveWayPoint.y = BaseOrigin.y + Random.Range(-FlyBounds.y,FlyBounds.y);
		ActiveWayPoint.z = BaseOrigin.z + Random.Range(-FlyBounds.z,FlyBounds.z);
	}
	
	void Update () {
		
		if (!Application.isPlaying) {
			BaseOrigin = transform.position;
			DrawBounds();
			return;
		}
		
		if( Time.time > nextWayPointTime || Vector3.Distance(ActiveWayPoint, transform.position) <= minWayPointSwitchDistance ) {
			flySpeed = Random.Range(minFlySpeed,maxFlySpeed);
			baseSpeed = flySpeed;
			turnSpeed = Random.Range(flySpeed,maxFlySpeed) * TurnDelta;
			maxPathPointTime = Random.Range(minWaypointTime,maxWaypointTime);
			nextWayPointTime = Time.time + maxPathPointTime;
			turnSpeed = TurnDelta;
			SetNextWayPoint();
		}
		
		Vector3 lookDirection = ActiveWayPoint - transform.position;
		float Dot = Vector3.Dot(transform.forward, lookDirection.normalized);
		
		if(Dot < 0.0f)
			Dot = -Dot*2;
		
		float bank = banking * Dot * -Vector3.Dot(transform.right, lookDirection.normalized);
    	Quaternion rot = Quaternion.LookRotation(lookDirection.normalized) * Quaternion.AngleAxis(bank, Vector3.forward);
		
		if(Dot >= 0.0f)
			turnSpeed = (TurnDelta * 1 - Dot);
		else
			turnSpeed = TurnDelta;
		
		float UpDot = Vector3.Dot(transform.forward, Vector3.up);
		if(UpDot > 0.2f) {
			animationState.speed = 10.0f * UpDot;
			flySpeed = (minFlySpeed / 1.5f) + baseSpeed * (1 - UpDot);
		} else if(UpDot < -0.2f) {
			animationState.speed = 1 *  (1 - -UpDot);
			flySpeed = (minFlySpeed / 1.5f) + baseSpeed * 1 + -UpDot;
			turnSpeed *= flySpeed / 6 * -UpDot;
		}
		
		transform.rotation = Quaternion.RotateTowards(transform.rotation, rot, turnSpeed * Time.deltaTime);
		transform.Translate(Vector3.forward * flySpeed * Time.deltaTime);

	}
	
	void DrawBounds() {
		Debug.DrawLine(BaseOrigin + new Vector3(-FlyBounds.x,-FlyBounds.y,-FlyBounds.z), BaseOrigin + new Vector3(-FlyBounds.x,-FlyBounds.y,FlyBounds.z), Color.red);
		Debug.DrawLine(BaseOrigin + new Vector3(-FlyBounds.x,-FlyBounds.y,-FlyBounds.z), BaseOrigin + new Vector3(FlyBounds.x,-FlyBounds.y,-FlyBounds.z), Color.red);
		Debug.DrawLine(BaseOrigin + new Vector3(FlyBounds.x,-FlyBounds.y,-FlyBounds.z), BaseOrigin + new Vector3(FlyBounds.x,-FlyBounds.y,FlyBounds.z), Color.red);
		Debug.DrawLine(BaseOrigin + new Vector3(FlyBounds.x,-FlyBounds.y,FlyBounds.z), BaseOrigin + new Vector3(-FlyBounds.x,-FlyBounds.y,FlyBounds.z), Color.red);
		
		Debug.DrawLine(BaseOrigin + new Vector3(-FlyBounds.x,FlyBounds.y,-FlyBounds.z), BaseOrigin + new Vector3(-FlyBounds.x,FlyBounds.y,FlyBounds.z), Color.red);
		Debug.DrawLine(BaseOrigin + new Vector3(-FlyBounds.x,FlyBounds.y,-FlyBounds.z), BaseOrigin + new Vector3(FlyBounds.x,FlyBounds.y,-FlyBounds.z), Color.red);
		Debug.DrawLine(BaseOrigin + new Vector3(FlyBounds.x,FlyBounds.y,-FlyBounds.z), BaseOrigin + new Vector3(FlyBounds.x,FlyBounds.y,FlyBounds.z), Color.red);
		Debug.DrawLine(BaseOrigin + new Vector3(FlyBounds.x,FlyBounds.y,FlyBounds.z), BaseOrigin + new Vector3(-FlyBounds.x,FlyBounds.y,FlyBounds.z), Color.red);
		
		Debug.DrawLine(BaseOrigin + new Vector3(-FlyBounds.x,-FlyBounds.y,-FlyBounds.z), BaseOrigin + new Vector3(-FlyBounds.x,FlyBounds.y,-FlyBounds.z), Color.red);
		Debug.DrawLine(BaseOrigin + new Vector3(-FlyBounds.x,-FlyBounds.y,FlyBounds.z), BaseOrigin + new Vector3(-FlyBounds.x,FlyBounds.y,FlyBounds.z), Color.red);
		Debug.DrawLine(BaseOrigin + new Vector3(FlyBounds.x,-FlyBounds.y,-FlyBounds.z), BaseOrigin + new Vector3(FlyBounds.x,FlyBounds.y,-FlyBounds.z), Color.red);
		Debug.DrawLine(BaseOrigin + new Vector3(FlyBounds.x,-FlyBounds.y,FlyBounds.z), BaseOrigin + new Vector3(FlyBounds.x,FlyBounds.y,FlyBounds.z), Color.red);
	}
	
}