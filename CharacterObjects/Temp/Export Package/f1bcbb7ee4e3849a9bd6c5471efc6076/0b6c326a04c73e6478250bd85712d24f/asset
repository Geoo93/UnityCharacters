Shader "TMG/UnderWaterSurface" {
	Properties {
		_Color ("Color", Color) = (1,1,1,1)
		_MainTex ("Base (RGB)", 2D) = "white" {}
		_BumpMap ("Bumpmap", 2D) = "bump" {}
		_BumpStrength ("Bump Strength", Range(0.0, 25)) = 1
		_SpecColor ("Specular Color", Color) = (0.5, 0.5, 0.5, 1)
		_Specular ("Specular", Range (0.0, 2)) = 0.078125
		_Shininess ("Shininess", Range (1, 64)) = 64
	}
	SubShader {
		Blend SrcAlpha OneMinusSrcAlpha
		Tags { "Queue"="Transparent" "IgnoreProjector"="True" "RenderType"="Transparent"}
		LOD 200
		Cull Back
		Lighting On
		
		CGPROGRAM
		#pragma surface surf WaterSpecular alpha

		sampler2D _MainTex;
		fixed4 _Color;
		sampler2D _BumpMap;
		fixed _BumpStrength;
		fixed _Specular;
		float _Shininess;
		
		half4 LightingWaterSpecular (SurfaceOutput s, half3 lightDir, half3 viewDir, half atten) {
			half3 h = normalize (lightDir*-1 + viewDir);
			
			half diff = max (0, dot (s.Normal, lightDir*-1));
			
			float nh = max (0, dot (s.Normal, h));
			float spec = pow (nh, _Shininess)* _Specular;
			
			half4 c;
			c.rgb = s.Albedo + (_LightColor0.rgb * diff * _SpecColor.rgb * spec) * (atten * 2);
			c.a = s.Alpha;
			return c;
		}

		struct Input {
			float2 uv_MainTex;
			float2 uv_BumpMap;
		};

		void surf (Input IN, inout SurfaceOutput o) {
			half4 c = tex2D (_MainTex, IN.uv_MainTex);
			half3 normal = UnpackNormal(tex2D(_BumpMap, IN.uv_BumpMap));
			o.Normal.xyz = normalize(lerp(fixed3(0, 0, 1), normal.xyz, _BumpStrength));
			o.Albedo = c.rgb * _Color.rgb;
			o.Alpha = _Color.a;
		}
		ENDCG
	} 
	FallBack "Diffuse"
}
