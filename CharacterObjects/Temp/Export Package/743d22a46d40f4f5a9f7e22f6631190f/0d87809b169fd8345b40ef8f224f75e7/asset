Shader "FXLab/Other/Lense" {
    Properties {
    	_MainMap ("Main Texture", 2D) = "white" {}
		_DistortionMap ("Distortion Map", 2D) = "bump" {}
		_Strength ("Strength", Range(0, 1)) = 0.25
		_ScanLineMap ("ScanLine Texture", 2D) = "white" {}
		_ScanLineStrength ("ScanLine Strength", Range(0, 1.0)) = 0.25
		_ScrollSpeed ("ScanLine Scroll Strength", Range(0, 0.5)) = 0
		_NoiseMap ("NoiseFrame1 Texture", 2D) = "white" {}
		_NoiseStrength ("Noise Strength", Range(0, 1.0)) = 0
		
	}
	SubShader {
		Blend One Zero
		Tags { "Queue"="Overlay" "IgnoreProjector"="True" "RenderType"="Opaque"}
		Lighting Off
		Cull back
		Fog { Mode Off }
		ZWrite Off
				
		Pass {
			CGPROGRAM
			#pragma vertex vert
			#pragma fragment frag 
			#pragma target 3.0
			#include "UnityCG.cginc"
			#include "Effects.cginc"

			sampler2D _MainMap;
			sampler2D _DistortionMap;
			float _Strength;
			sampler2D _ScanLineMap;
			float _ScanLineStrength;
			float _ScrollSpeed;
			sampler2D _NoiseMap;
			float _NoiseStrength;
				
			struct appdata {
				float4 vertex : POSITION;
				float4 texcoord : TEXCOORD0;
			};

			struct v2f {
				float4 pos : SV_POSITION;
				float2 uv : TEXCOORD0;
				float4 uv2 : TEXCOORD1;
			};
						
			v2f vert (appdata v) {
				v2f o;
				o.pos = mul( UNITY_MATRIX_MVP, v.vertex );
				o.uv = float4( v.texcoord.xy, 0, 0 );
				o.uv2 = o.pos;
				return o;
			}
				
			float4 frag( v2f o ) : COLOR
			{
				SCREEN_UV(o.uv2);
				
				fixed4 mainColor = tex2D(_MainMap, o.uv);
				half2 distortion = UnpackNormal(tex2D(_DistortionMap, o.uv)).rg;
				fixed3 refr = SAMPLE_SCREEN(distortion * _Strength);
				mainColor.rgb = lerp(refr, mainColor.rgb, mainColor.a);
				
				float2 uv_offset = float2(o.uv.x, o.uv.y + _Time.w * _ScrollSpeed);
				fixed4 ScanLineColor = tex2D(_ScanLineMap, o.uv + uv_offset);
				mainColor.rgb = lerp(mainColor.rgb, lerp(mainColor.rgb,ScanLineColor.rgb * ScanLineColor, _ScanLineStrength), 1 - mainColor.a);
				
				fixed3 noise = tex2D(_NoiseMap, o.uv + _Time.w).rgb;
				fixed3 noiseColor = tex2D(_NoiseMap, float2(o.uv.x + _Time.x * 234.2345, o.uv.y + _Time.x * 234.2345)).rgb;
				noiseColor.rgb = clamp(noiseColor.rgb*1.4, float3(0), float3(1));
				mainColor.rgb = lerp(mainColor.rgb, lerp(mainColor.rgb,mainColor.rgb * noiseColor.rgb, _NoiseStrength), 1 - mainColor.a);
				
				return fixed4(mainColor.rgb, 1);
				
				//return fixed4(tex2D(_ScreenGrabTextureAtlas, screenUV),1):
			}
			ENDCG
        }
    }
    Fallback off
}

