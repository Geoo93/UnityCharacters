using UnityEngine;
using System.Collections;

public class ExplodingBarrel : MonoBehaviour {
	
	public GameObject ExplosionPrefab;
	private float mass = 25.0f;
	private float forceRadius = 64.0f;
	private float pushForce = 96.123f;
	
	private ShockWave ShockWaveScript;
	
	public  bool DESTROYED;
	private bool DELAYEXPLODE;
	private float explodeDelay;
	
	void Awake() {
		BarrelController.BarrelObjects.Add(this);
	}

	void Start () {
		ShockWaveScript = GetComponent<ShockWave>();
		rigidbody.mass = mass;
	}
	
	void Update () {
		if(DESTROYED)
			return;
		
		if(DELAYEXPLODE) {
			if(Time.time >= explodeDelay) {
				Explode(transform.rotation);
				DELAYEXPLODE = false;
			}
		}
	}
	
	public void Explode(Quaternion rotation) {
		if(DESTROYED)
			return;
		
		DESTROYED = true;
		SpawnExplosion(ExplosionPrefab, transform.position, rotation);
		ShockWaveScript.SpawnShockWave(transform.position);
			
		foreach(ExplodingBarrel go in BarrelController.BarrelObjects) {
			if(go != null) {
				if(go != this) {
					float distance = Vector3.Distance(transform.position, go.gameObject.transform.position);
					if(distance <= forceRadius / 2) {
						go.gameObject.rigidbody.AddExplosionForce(pushForce, transform.position, forceRadius,0,ForceMode.Impulse);
						CheckChainReactionExplosion(go, distance);
					}
				}
			}
		}
		renderer.enabled = false;
	}
	
	void CheckChainReactionExplosion(ExplodingBarrel go, float distance) {
		if(distance <= 6.5f) {
			float ExplodeOffsetTime = Time.time + 0.05f + Random.Range(0.06f,0.15f);		// Slow
			go.ExplodeWithDelay(ExplodeOffsetTime);
		}
	}
	
	public void ExplodeWithDelay(float delay) {
		explodeDelay = delay;
		DELAYEXPLODE = true;
	}
	
	void SpawnExplosion(GameObject prefab, Vector3 pos, Quaternion rot) {
		GameObject Explosion = Instantiate(prefab, pos, rot) as GameObject;
		Explosion.GetComponent<DelayDestroy>().SetLifeTime(10.0f);
	}

}
